{% extends molecule('product-card-item', 'ShopUi') %}
{% import model('component') as component %}

{% define config = {
    name: 'order-card-item',
    tag: 'article',
} %}

{% macro renderPrice(defaultPrice, modifiers, originalPrice = null,  showVatText = true) %}
    {% include molecule('money-price') with {
        modifiers: ['medium'],
        class: component.renderClass('order-card-item__price', modifiers),
        data: {
            amount: defaultPrice,
            originalAmount: originalPrice,
            priceVatText: showVatText is same as true ? 'pdp.include.vat' : null
        },
    } only %}
{% endmacro %}

{% set benefitVoucherApplied = data.productItem.useBenefitVoucher %}
{% set shoppingPointsApplied = data.productItem.useShoppingPoints %}
{% set originalPrice = data.productItem.prices.ORIGINAL is not defined or data.productItem.prices.ORIGINAL is empty ? null : data.productItem.prices.ORIGINAL %}

{% block price %}
    <div class="grid grid--right">
        <div class="row">
            {% set price = data.productItem.unitPrice is defined ? data.productItem.unitPrice : data.productItem.price %}
            {% if benefitVoucherApplied %}
                {% set price = data.productItem.sumBenefitPrice ?? data.productItem.sumGrossPrice  %}
                {{ _self.renderPrice(price, modifiers, null, false) }}
                <span class="{{ config.name }}__benefit">
                    <span class="{{ config.name }}__benefit-amount">
                        + {{ data.productItem.totalUsedBenefitVouchersAmount | money }}
                    </span>
                    {% include atom('icon') with {
                        class: config.name ~ '__icon',
                        modifiers: ['medium-up'],
                        data: {
                            name: 'benefit-point',
                        },
                    } only %}
                    <span class="{{ config.name }}__vat">
                        {{ 'pdp.include.vat' | trans }}
                    </span>
                </span>
            {% elseif shoppingPointsApplied %}
                {% set price = data.productItem.sumBenefitPrice ?? data.productItem.sumPrice %}
                {{ _self.renderPrice(price, modifiers) }}
            {% else %}
                {% set price = data.productItem.quantity is not empty ? data.productItem.quantity * price : price %}
                {{ _self.renderPrice(price, modifiers) }}
            {% endif %}
        </div>
    </div>
{% endblock %}

{% block benefitPrice %}
{% endblock %}

