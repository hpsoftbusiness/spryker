{% extends view('summary', '@SprykerShop:CheckoutPage') %}

{% define data = {
    payment: _view.quoteTransfer.payment,
} %}

{% block content %}
    {% set isGiftCardExists = null %}
    <h2 class="title title--primary">{{ 'checkout.step.summary.title' | trans }}</h2>

    {% for shipmentGroup in data.shipmentGroups %}
        <article class="checkout-block grid">
            <div class="col col--sm-12 col--lg-8">
                <h3 class="title title--secondary-box">
                    {{ 'page.checkout.shipment.shipment_group_heading' | trans({
                        '%current%': loop.index,
                        '%total%': loop.length
                    }) }}
                </h3>
                {% widget 'QuoteConfiguredBundleWidget' args [data.cart, shipmentGroup.items] with {
                    data: {
                        isEditable: false,
                        isQuantityVisible: true,
                    },
                } only %}
                {% endwidget %}

                {% set itemsExceptConfiguredBundles = shipmentGroup.cartItems | filter(item => item.configuredBundleItem is not defined or item.configuredBundleItem is empty) %}

                {% for item in itemsExceptConfiguredBundles %}
                    {% set cartItem = item.bundleProduct ?? item %}
                    {% set isGiftCardExists = cartItem.giftCardMetadata is not null and cartItem.giftCardMetadata.isGiftCard %}

                    {% embed molecule('product-card-item') with {
                        modifiers: ['expand', 'secondary', 'alternative', 'right-indent-from-tablet'],
                        data: {
                            productItem: cartItem,
                            canEditCart: false,
                            additionalContainerClass: '',
                            productOptionsModifiers: ['alternative'],
                            cashback: cartItem.concreteAttributes.cashback_amount | default(null),
                            shoppingPoints: cartItem.concreteAttributes.shopping_points | default(null),
                    },
                        embed: {
                            bundleItems: item.bundleItems | default([]),
                        },
                    } only %}
                        {% block image %}
                            <div class="{{ component.renderClass(config.name ~ '__image', modifiers) }} col">
                                {% include molecule('product-image') with {
                                    modifiers: ['no-side-indent'],
                                    data: {
                                        name: data.productItem.name,
                                        image: data.productItem.images[0].externalUrlLarge ?? null,
                                    },
                                } only %}
                            </div>
                        {% endblock %}

                        {% block title %}
                            <div class="{{ component.renderClass(config.name ~ '__title', modifiers) }} col col--sm-12 col--lg-8">
                                {{ data.productItem.name }}
                            </div>
                        {% endblock %}

                        {% block options %}
                            {% if data.productItem.concreteAttributes is not empty %}
                                <ul>
                                    {% for key, item in data.productItem.concreteAttributes | filterAttributes %}
                                        {% if key in ['size', 'color', 'brand'] %}
                                            <li>{{ ('product.attribute.' ~ key) | trans }}: {{ item }}</li>
                                        {% endif %}
                                    {% endfor %}
                                </ul>
                            {% endif %}
                        {% endblock %}

                        {% block bundles %}
                            {% include molecule('cart-bundle-list', 'ProductBundleWidget') ignore missing with {
                                data: {
                                    items: embed.bundleItems,
                                },
                            } only %}
                        {% endblock %}
                    {% endembed %}
                {% endfor %}
            </div>

            <div class="col col--sm-12 col--lg-4">
                {% include molecule('summary-sidebar', 'CheckoutPage') with {
                    data: {
                        shipment: shipmentGroup.shipment,
                        canEdit: true,
                    },
                } only %}
            </div>
        </article>
    {% endfor %}

    <div class="checkout-block">
        <h3 class="title title--secondary-box">{{ 'checkout.step.summary.payment' | trans }}</h3>
        <div class="grid grid--justify grid--baseline">
            <div class="col col--sm-12 col--md-5">
                {% include molecule('payment-card-information', 'CheckoutPage') with {
                    data: {
                        payment: data.payment,
                        cart: data.cart,
                    },
                } only %}
            </div>
            <div class="col col--sm-12 col--md-5">
                <h4 class="title title--secondary-small">{{ 'checkout.step.summary.billing_address' | trans }}</h4>
                {% include molecule('display-address') with {
                    class: 'spacing-bottom',
                    data: {
                        address: data.billingAddress,
                    },
                } only %}
                <a class="link link--primary" href="{{ url('checkout-address') }}">{{ 'general.edit.button' | trans }}</a>
            </div>
        </div>
    </div>

    <div class="grid">
        <h3 class="col col--sm-12 title title--secondary-box spacing-bottom spacing-bottom--reset spacing-top spacing-top-bigger">
            {{ 'checkout.step.summary.total' | trans }}
        </h3>
        <div class="col col--sm-12">
            {% embed molecule('form') with {
                modifiers: ['checkout-actions'],
                data: {
                    form: data.forms.summary,
                    submit: {
                        enable: true,
                        text: 'checkout.step.place.order' | trans,
                        class: 'form__action--checkout button button--large button--expand js-form__submit-button',
                    },
                    cancel: {
                        enable: true,
                        url: data.backUrl,
                        text: 'general.back.button' | trans,
                        icon: '',
                        class: 'form__action--checkout button button--hollow button--expand',
                    },
                },
                embed: {
                    overview: data.overview,
                    cart: data.cart,
                    acceptTermsFieldName: data.acceptTermsFieldName,
                },
            } only %}
                {% block field %}
                    {% if fieldName == embed.acceptTermsFieldName %}
                        {{ form_row(field, {
                            component: molecule('accept-terms-checkbox', 'CheckoutPage'),
                            label: field.vars.label,
                            rowAttr: {
                                class: config.name ~ '__field ' ~ fieldLayoutClass,
                            },
                            attributes: {
                                'target-class-name': config.jsName ~ '__submit-button',
                            },
                        }) }}
                    {% else %}
                        {{ parent() }}
                    {% endif %}
                {% endblock %}

                {% block body %}
                    {% include molecule('summary-overview', 'CheckoutPage') with {
                        data: embed.overview,
                        embed: {
                            cart: embed.cart,
                        },
                    } only %}

                    {{ parent() }}
                {% endblock %}
            {% endembed %}
        </div>
    </div>
{% endblock %}
