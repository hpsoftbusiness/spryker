{% extends model('component') %}

{% define config = {
    name: 'product-configurator',
    tag: 'section'
} %}

{% define data = {
    product: required,
    maxQuantity: 10,
    isBundle: null,
    bundleItems: [],
    cashback: data.product.cashbackAmount | default(null),
    shoppingPoints: data.product.shoppingPoints | default(null),
    shippingPriceFrom: 4.95
} %}

{% set options = [] %}
{% set productName = data.product.name | default  | replace({'\\': ''}) %}
{% set sku = data.product.sku %}
{% set availabilityWidget = '' %}
{% set isProductConcrete = data.product.idProductConcrete is not empty %}
{% set isDisabled = data.product.idProductConcrete is empty or data.product.price is empty %}
{% set isProductAvailable = true %}
{% set productBrand = data.product.attributes['brand'] | default %}

{% for index in 1..data.maxQuantity %}
    {% set options = options | merge([{
        label: index,
        value: index
    }]) %}
{% endfor %}

{% set isAvailable = data.product.idProductConcrete and data.product.available %}
{% set isDisabled = not isAvailable or isDisabled %}

{% set productDiscontinuedNoteWidget = findWidget('ProductDiscontinuedNoteWidget', [sku]) %}
{% if productDiscontinuedNoteWidget.isDiscontinued is not null %}
    {% set isDisabled = productDiscontinuedNoteWidget.isDiscontinued or isDisabled %}
    {% set isProductAvailable = not productDiscontinuedNoteWidget.isDiscontinued %}
{% endif %}

{% block body %}

    <h1 class="title title--product title--h2">{{ productName }}</h1>

    <div class="{{ config.name }}__product-meta">
        <div class="{{ config.name }}__info">
            <span class="{{ config.name }}__brand">
                {{ 'page.product.by' | trans }} {{ productBrand }}
            </span> -
            <span class="{{ config.name }}__seller">
                {{ 'page.product.seller' | trans }} <a class="{{ config.name }}__link" href="https://corporate.myworld.com/">myWorld.com</a>
            </span>
        </div>

        {# TODO: Make this product meta dynamic #}
        <div class="{{ config.name }}__status">
            {{ 'page.product.condition' | trans }}: <strong>{{ 'page.product.status' | trans }}</strong>
        </div>
    </div>

    <div class="spacing-bottom spacing-bottom--big">

        <div class="row">
            {% widget 'ProductPriceVolumeWidget' args [data.product] only %}
            {% nowidget %}
                <div class="col">
                    {% include molecule('money-price') with {
                        modifiers: ['pdp'],
                        data: {
                            amount: data.product.price,
                            originalAmount: data.product.prices.ORIGINAL is not defined ? null : data.product.prices.ORIGINAL
                        }
                    } only %}
                </div>
            {% endwidget %}
        </div>
    </div>

    {% set cashback = data.cashback %}
    {% set benefitAmount = data.product.benefitAmount ?? null %}
    {% set benefitPrice = data.product.prices.BENEFIT ?? null %}
    {% set shoppingPointsAmount = data.product.shoppingPointsAmount ?? null %}
    <div class="grid spacing-bottom spacing-bottom--biggest spacing-top">

        {% if benefitPrice and benefitAmount %}

            {% set benefitAmountText = 'product_detail_page.benefit_price.benefit_amount' | trans({
                '%amount%': benefitAmount | money
            })%}

            <div class="col col--sm-6 col--md-5">
                {% include molecule('product-benefit-price', 'ProductDetailPage') with {
                    data: {
                        regularPriceAmount: data.product.price,
                        benefitPriceAmount: benefitPrice,
                        benefitCurrencyAmount: benefitAmount,
                    }
                } only %}
            </div>

        {% elseif benefitPrice and shoppingPointsAmount %}
                <div class="col col--sm-6 col--md-5">
                    {% include molecule('product-shop-price', 'ProductDetailPage') with {
                        data: {
                            regularPriceAmount: data.product.price,
                            benefitPriceAmount: benefitPrice,
                            benefitCurrencyAmount: shoppingPointsAmount,
                        }
                    } only %}
                </div>
        {% endif %}
    </div>

    <div class="spacing-top">
        {{ 'page.product.shipping-fee-from' | trans }} {{ data.shippingPriceFrom | money }}
    </div>

    <div class="spacing-top">
        {{ 'shipment.lead.time' | trans }}
    </div>

    {% if can('SeeWishlistPermissionPlugin') and isProductAvailable %}
        {% include molecule('wishlist-selector-for-pdp', 'WishlistWidget') ignore missing with {
            class: config.name ~ '__form spacing-y spacing-y--bigger',
            data: {
                sku: data.product.sku,
                idProductConcrete: data.product.idProductConcrete | default
            }
        } only %}
    {% endif %}

    {% if data.isBundle != null %}
        {% embed molecule('toggler-item') with {
            modifiers: ['option'],
            data: {
                title: 'bundle.title' | trans,
                triggerClass: config.jsName ~ '__trigger-bundle',
                targetClass: config.jsName ~ '__target-bundle',
                isActive: true,
            },
            embed: {
                bundleItems: data.bundleItems,
            }
        } only %}
            {% block contentText %}
                {% include molecule('bundle-option-list', 'ProductDetailPage') with {
                    data: {
                        bundleItems: embed.bundleItems,
                    }
                } only %}
            {% endblock %}
        {% endembed %}
    {% endif %}

    {% block colors %}
        {% widget 'ProductGroupColorWidget' args [data.product.idProductAbstract, data.product.selectedAttributes ?? []] use view('product-detail-color-selector', 'ProductGroupWidget') only %}{% endwidget %}
    {% endblock %}

    {% include molecule('variant-configurator', 'ProductDetailPage') with {
        data: {
            superAttributes: data.product.attributeMap.superAttributes,
            selectedAttributes: data.product.selectedAttributes,
            availableAttributes: data.product.availableAttributes
        }
    } only %}

    <hr class="{{ config.name }}__separator" />

    {% widget 'AddToCartFormWidget' args [config, data.product, isDisabled, options] only %}
        {% block embeddedData %}
            {% widget 'ProductOptionConfiguratorWidget' args [data.product] only %}{% endwidget %}

            {% if not data.isDisabled and can('SeeAddToCartPermissionPlugin') %}

                {% embed molecule('toggler-item') with {
                    modifiers: ['option', 'pdp'],
                    data: {
                        title: 'cart.item_quantity' | trans,
                        isToggler: false,
                    },
                } only %}
                    {% block contentText %}
                        {% include molecule('quantity-counter') with {
                            modifiers: ['quantity-large', 'no-spacing'],
                            data: {
                                readOnly: true,
                            },
                        } only %}
                    {% endblock %}
                {% endembed %}

            {% else %}
                <input type="hidden" class="js-volume-price__quantity">
            {% endif %}

            {% include molecule('availability-product', 'AvailabilityWidget') ignore missing with {
                data: {
                    idProductConcrete: data.product.idProductConcrete,
                    isAvailable: data.product.available,
                },
            } only %}

            {% widget 'ProductDiscontinuedNoteWidget' args [data.product.sku] only %}{% endwidget %}

            {% if can('SeeAddToCartPermissionPlugin') %}
                <div class="{{ data.config.name }}__button-wrap">
                    <button class="button button--large button--expand" {{ data.isDisabled ? 'disabled' }} {{ qa('add-to-cart-button') }} data-init-single-click>
                        {{ 'page.detail.add-to-cart' | trans }}
                    </button>
                </div>
            {% endif %}
        {% endblock %}
    {% endwidget %}
{% endblock %}
